--20220824
update orders set paid_amount=(select sum(amount) from payments where order_id=orders.id and STATUS='paid');
update orders set paid_amount=0 where paid_amount is null;

--20220825
update roles set color_name='red' where name='admin';
update roles set color_name='orange' where name='manager';
update roles set color_name='yellow' where name='internal_coach';
update roles set color_name='green' where name='external_coach';
update roles set color_name='blue' where name='member';
update roles set color_name='purple' where name='user';




--20220825. Below deprecated, use program seems better because we need to update both paid_amount and payment_status.
DROP TRIGGER IF EXISTS upd_order_paidamt;
DROP TRIGGER IF EXISTS ins_order_paidamt;

DELIMITER $$
CREATE TRIGGER ins_order_paidamt AFTER INSERT ON payments FOR EACH ROW
BEGIN
    DECLARE total_paid DOUBLE;

    select sum(amount) INTO total_paid from payments, orders where payments.order_id=NEW.order_id and payments.STATUS='paid';

    IF total_paid > 0 THEN
        update orders set paid_amount=total_paid where id=NEW.order_id;
    ELSE
        update orders set paid_amount=0 where id=NEW.order_id;
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER upd_order_paidamt AFTER UPDATE ON payments FOR EACH ROW
BEGIN
    DECLARE total_paid DOUBLE;

    select sum(amount) INTO total_paid from payments where order_id=NEW.order_id and STATUS='paid';

    IF total_paid > 0 THEN
        update orders set paid_amount=total_paid where id=NEW.order_id;
    ELSE
        update orders set paid_amount=0 where id=NEW.order_id;
    END IF;
END $$
DELIMITER ;

--20220830, to update demo data.
UPDATE `appointments` SET `start_time`=DATE_ADD(start_time, INTERVAL 25 DAY), `end_time`=DATE_ADD(end_time, INTERVAL 25 DAY);
UPDATE `orders` SET `order_date`=DATE_ADD(order_date, INTERVAL 25 DAY);
UPDATE `payments` SET `payment_date_time`=DATE_ADD(payment_date_time, INTERVAL 25 DAY);

UPDATE `appointments` SET `start_time`=DATE_SUB(start_time, INTERVAL 5 DAY), `end_time`=DATE_SUB(end_time, INTERVAL 5 DAY);
UPDATE `orders` SET `order_date`=DATE_SUB(order_date, INTERVAL 5 DAY);
UPDATE `payments` SET `payment_date_time`=DATE_SUB(payment_date_time, INTERVAL 5 DAY);

--20220920
added second_name & mobile_no.

--20220922
CREATE TABLE `trainer_timeslots` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `location_id` int(10) UNSIGNED NOT NULL,
  `trainer_id` int(10) UNSIGNED NOT NULL,
  `day_idx` int(11) NOT NULL,
  `from_time` time NOT NULL,
  `to_time` time NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
   PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO trainer_timeslots (location_id, trainer_id, day_idx, from_time, to_time) SELECT location_id, b.id, day_idx, from_time, to_time FROM timeslots a, users b WHERE b.role_id IN (select id from roles where name in ('manager', 'internal_coach', 'external_coach'));

--
ALTER TABLE `users` ADD `service_id` INT NOT NULL DEFAULT '1' AFTER `second_name`;

--20221001 [done]
CREATE TABLE `holidays` (
  `id` int(10) UNSIGNED NOT NULL,
  `location_id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `user_id` int(10) UNSIGNED DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE `holidays`
  ADD PRIMARY KEY (`id`);

--20221005, update appointments user_id to trainer id based on student's linked trainer.
--for driving school only. [done]
select * from users where settings like '%trainer%';
update appointments set user_id=4 where user_id=3;
update appointments set user_id=6 where user_id=8;
update appointments set user_id=2 where user_id=9;
update appointments set user_id=4 where user_id=10;
--for ping pong[done]
ALTER TABLE `appointments` ADD `entity` VARCHAR(20) NOT NULL DEFAULT 'appointment' AFTER `internal_remark`;
--for drivingdb[done]
ALTER TABLE `appointments` ADD `entity` VARCHAR(20) NOT NULL DEFAULT 'training' AFTER `internal_remark`;

--20221010, add fields to appointments.
ALTER TABLE `appointments` ADD `parent_id` INT NULL AFTER `entity`;
ALTER TABLE `appointments` ADD `notify_parties` BOOLEAN NOT NULL DEFAULT TRUE AFTER `parent_id`;
ALTER TABLE `orders` ADD `repeatable` BOOLEAN NOT NULL DEFAULT FALSE AFTER `payment_status`;
ALTER TABLE `orders` ADD `recurring` TEXT AFTER `payment_status`;   // json array. e.g: {cycle: 'week', repeat: [1,3]}
