--20220824
update orders set paid_amount=(select sum(amount) from payments where order_id=orders.id and STATUS='paid');
update orders set paid_amount=0 where paid_amount is null;

--20220825
update roles set color_name='red' where name='admin';
update roles set color_name='orange' where name='manager';
update roles set color_name='yellow' where name='internal_coach';
update roles set color_name='green' where name='external_coach';
update roles set color_name='blue' where name='member';
update roles set color_name='purple' where name='user';




--20220825. Below deprecated, use program seems better because we need to update both paid_amount and payment_status.
DROP TRIGGER IF EXISTS upd_order_paidamt;
DROP TRIGGER IF EXISTS ins_order_paidamt;

DELIMITER $$
CREATE TRIGGER ins_order_paidamt AFTER INSERT ON payments FOR EACH ROW
BEGIN
    DECLARE total_paid DOUBLE;

    select sum(amount) INTO total_paid from payments, orders where payments.order_id=NEW.order_id and payments.STATUS='paid';

    IF total_paid > 0 THEN
        update orders set paid_amount=total_paid where id=NEW.order_id;
    ELSE
        update orders set paid_amount=0 where id=NEW.order_id;
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER upd_order_paidamt AFTER UPDATE ON payments FOR EACH ROW
BEGIN
    DECLARE total_paid DOUBLE;

    select sum(amount) INTO total_paid from payments where order_id=NEW.order_id and STATUS='paid';

    IF total_paid > 0 THEN
        update orders set paid_amount=total_paid where id=NEW.order_id;
    ELSE
        update orders set paid_amount=0 where id=NEW.order_id;
    END IF;
END $$
DELIMITER ;

--20220830, to update demo data.
UPDATE `appointments` SET `start_time`=DATE_ADD(start_time, INTERVAL 25 DAY), `end_time`=DATE_ADD(end_time, INTERVAL 25 DAY);
UPDATE `orders` SET `order_date`=DATE_ADD(order_date, INTERVAL 25 DAY);
UPDATE `payments` SET `payment_date_time`=DATE_ADD(payment_date_time, INTERVAL 25 DAY);

UPDATE `appointments` SET `start_time`=DATE_SUB(start_time, INTERVAL 5 DAY), `end_time`=DATE_SUB(end_time, INTERVAL 5 DAY);
UPDATE `orders` SET `order_date`=DATE_SUB(order_date, INTERVAL 5 DAY);
UPDATE `payments` SET `payment_date_time`=DATE_SUB(payment_date_time, INTERVAL 5 DAY);

--20220920
added second_name & mobile_no.

--20220922
CREATE TABLE `trainer_timeslots` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `location_id` int(10) UNSIGNED NOT NULL,
  `trainer_id` int(10) UNSIGNED NOT NULL,
  `day_idx` int(11) NOT NULL,
  `from_time` time NOT NULL,
  `to_time` time NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
   PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO trainer_timeslots (location_id, trainer_id, day_idx, from_time, to_time) SELECT location_id, b.id, day_idx, from_time, to_time FROM timeslots a, users b WHERE b.role_id IN (select id from roles where name in ('manager', 'internal_coach', 'external_coach'));

--[done: victory]
ALTER TABLE `users` ADD `service_id` INT NOT NULL DEFAULT '1' AFTER `second_name`;

ALTER TABLE `services` ADD `session_min` int(11) NOT NULL AFTER `translations`;
ALTER TABLE `services` ADD `duration` int(11) DEFAULT NULL AFTER `session_min`;
ALTER TABLE `services` ADD `min_duration` int(11) NOT NULL AFTER `duration`;
ALTER TABLE `services` ADD `max_duration` int(11) NOT NULL AFTER `min_duration`;

--20221001 [done]
CREATE TABLE `holidays` (
  `id` int(10) UNSIGNED NOT NULL,
  `location_id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `user_id` int(10) UNSIGNED DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE `holidays`
  ADD PRIMARY KEY (`id`);
ALTER TABLE `holidays`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;

--20221005, update appointments user_id to trainer id based on student's linked trainer.
--for driving school only. [done]
select * from users where settings like '%trainer%';
update appointments set user_id=4 where user_id=3;
update appointments set user_id=6 where user_id=8;
update appointments set user_id=2 where user_id=9;
update appointments set user_id=4 where user_id=10;
--for ping pong[done]
ALTER TABLE `appointments` ADD `entity` VARCHAR(20) NOT NULL DEFAULT 'appointment' AFTER `internal_remark`;
--for drivingdb[done]
ALTER TABLE `appointments` ADD `entity` VARCHAR(20) NOT NULL DEFAULT 'training' AFTER `internal_remark`;

--20221010, add fields to appointments. [done]
ALTER TABLE `appointments` ADD `parent_id` INT NULL AFTER `entity`;
ALTER TABLE `appointments` ADD `notify_parties` BOOLEAN NOT NULL DEFAULT TRUE AFTER `parent_id`;
ALTER TABLE `orders` ADD `repeatable` BOOLEAN NOT NULL DEFAULT FALSE AFTER `payment_status`;
ALTER TABLE `orders` ADD `recurring` TEXT AFTER `payment_status`;   -- json array. e.g: {cycle: 'week', repeat: [1,3]}

--20221012, add fields for trainer commission. [done]
ALTER TABLE `orders` ADD `trainer_id` INT UNSIGNED NULL AFTER `paid_amount`, ADD `commission` DOUBLE NULL AFTER `trainer_id`;

--20221014
create table abc as select * from user_teammates;

DROP TABLE `user_teammates`;
CREATE TABLE `user_teammates` (
  `id` int(10) UNSIGNED PRIMARY KEY NOT NULL AUTO_INCREMENT,
  `user_id` int(10) UNSIGNED NOT NULL,
  `teammate_id` int(10) UNSIGNED NOT NULL,
  `created_by` int(10) UNSIGNED DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE `user_teammates`
  ADD UNIQUE KEY `user_id` (`user_id`,`teammate_id`);
INSERT INTO user_teammates (user_id, teammate_id, created_by) SELECT user_id, teammate_id, created_by FROM abc;
drop table abc;


--20221018
CREATE TABLE `packages` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(80) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `price` double DEFAULT NULL,
  `discount` double DEFAULT NULL,
  `status` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'visible',
  `quantity` int(11) NOT NULL,
  `trainer_id` int(10) UNSIGNED DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `service_id` int(10) UNSIGNED NOT NULL,
  `recurring` text COLLATE utf8mb4_unicode_ci,
  `start_date` date DEFAULT NULL,
  `no_of_session` int(11) DEFAULT NULL,
  `room_id` int(10) UNSIGNED DEFAULT NULL,
  `start_time` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

ALTER TABLE `packages` ADD PRIMARY KEY (`id`);


--
delete from order_details where created_at>'2022-11-09 10:15:00';
delete from orders where created_at>'2022-11-09 10:15:00';
delete from payments where created_at>'2022-11-09 10:15:00';
delete from customer_bookings where created_at>'2022-11-09 10:15:00';
delete from appointments where created_at>'2022-11-09 10:15:00';

--20221026, [done]
CREATE TABLE `trainer_workdate_timeslots` (
  `id` int(10) UNSIGNED NOT NULL,
  `location_id` int(10) UNSIGNED NOT NULL,
  `trainer_id` int(10) UNSIGNED NOT NULL,
  `work_date` date NOT NULL,
  `from_time` time NOT NULL,
  `to_time` time NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE `trainer_workdate_timeslots`
  ADD PRIMARY KEY (`id`);
ALTER TABLE `trainer_workdate_timeslots`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;
ALTER TABLE `trainer_workdate_timeslots` ADD UNIQUE(`location_id`, `trainer_id`, `work_date`, `from_time`);

--20221117
CREATE TABLE lemonade_notify_tpl AS SELECT name, type, entity, send_to, subject, content FROM `0xX06_amelia_notifications`;


-20221205, bravokids demo
update users set role_id=6 where role_id=2;
update users set role_id=4 where role_id=5;

ALTER TABLE `customer_bookings` ADD `checkin_by` INT AFTER `checkout`;

